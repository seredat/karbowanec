name: Build check

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*'            # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-2019
    env:
      BOOST_ROOT: C:\thirdparties\boost-1.83.0

    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Install OpenSSL
        run: choco install openssl

      - name: Install curl
        run: |
          choco install curl -y

      - name: Download and Install Boost 1.83
        run: |
          $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.83.0/boost_1_83_0-msvc-14.2-64.exe"
          $OutputPath = "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\boost-installer.exe"
          curl -L $Url -o $OutputPath
          Start-Process -Wait -FilePath $OutputPath "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=C:\\thirdparties\\boost-1.83.0"

      - name: Build
        shell: powershell
        id: build
        run: |
          $build_folder = "build"
          $sha = "${{ github.sha }}"
          $krb_ver = $sha.SubString(0,7)
          $release_name = "karbo-cli-win64-$krb_ver"
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -G "Visual Studio 16 2019" -A x64 -DBOOST_ROOT="$env:BOOST_ROOT" -DBOOST_INCLUDE_DIRS="$env:BOOST_ROOT/include" ..
          msbuild Karbowanec.sln /p:Configuration=Release /m
          cd src\Release
          Compress-Archive -Path *.exe -DestinationPath "$release_name.zip"
          $sha256 = (Get-FileHash "$release_name.zip").Hash
          $asset_path = "./$build_folder/src/Release/$release_name.zip"
          mkdir "$release_name"
          cp *.exe "$release_name/"
          echo "sha256=${sha256}" >> $env:GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $env:GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $env:GITHUB_OUTPUT
          echo "krb_ver=${krb_ver}" >> $env:GITHUB_OUTPUT
          echo "artifact_path=$build_folder/src/Release/$release_name" >> $env:GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-mingw:
    name: MinGW
    #if: false  # skip the job for now
    runs-on: windows-2019
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-openssl

      - name: Install dependencies
        shell: msys2 {0}
        run: |
          pacman -U --noconfirm https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-boost-1.83.0-2-any.pkg.tar.zst

      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Prepare version
        shell: powershell
        id: setup
        run: |
          $krb_ver="${{ github.sha }}".SubString(0,7)
          $release_name="karbo-cli-win64-mingw-$krb_ver"
          echo "release_name=${release_name}" >> $env:GITHUB_OUTPUT
      - name: Build
        shell: msys2 {0}
        id: build
        run: |
          ls
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DSTATIC=ON
          cmake --build . --config Release
      - name: Prepare release
        shell: msys2 {0}
        run: |
          mkdir build/karbo
          mv build/src/karbowanecd.exe build/karbo
          mv build/src/simplewallet.exe build/karbo
          mv build/src/greenwallet.exe build/karbo
          mv build/src/optimizer.exe build/karbo
          mv build/src/walletd.exe build/karbo
          mv build/src/vanitygen.exe build/karbo
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.setup.outputs.release_name }}
          path: build/karbo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: macOS
    runs-on: macos-13
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Install boost
        uses: MarkusJx/install-boost@v2
        id: install-boost
        with:
          boost_version: 1.83.0
          platform_version: 13
          toolset: clang

      - name: Build
        id: build
        run: |
          BOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}
          Boost_INCLUDE_DIR=$BOOST_ROOT/include
          Boost_LIBRARY_DIR=$BOOST_ROOT/lib
          build_folder="build/"
          krb_ver=${GITHUB_SHA::7}
          release_name="Karbo-cli-macOS-$krb_ver"
          brew install --force openssl gcc
          brew link openssl --force
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -DCMAKE_C_FLAGS="-mmacosx-version-min=10.12" -DCMAKE_CXX_FLAGS="-mmacosx-version-min=10.12" -DOPENSSL_USE_STATIC_LIBS=ON -DBOOST_ROOT=$BOOST_ROOT -DBoost_INCLUDE_DIR=$Boost_INCLUDE_DIR -DBoost_LIBRARY_DIR=$Boost_LIBRARY_DIR -DBoost_NO_SYSTEM_PATHS=ON -DBoost_USE_STATIC_LIBS=ON -DBoost_LIBRARYDIR=$BOOST_LIBRARY_DIR -DBoost_COMPILER=-clang -DBoost_ARCHITECTURE=-x64 ..
          make
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && strip "$f" && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          zip -r "$release_name".zip "$release_name"
          sha256=$(shasum -a 256 "$release_name".zip | awk '{print toupper($1)}')
          asset_path="./$build_folder$release_name.zip"
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
          echo "krb_ver=${krb_ver}" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu24:
    name: Ubuntu 24.04
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Build
        id: build
        run: |
          sudo apt-get update && sudo apt-get install -y libboost-all-dev
          build_folder="build/release"
          krb_ver=${GITHUB_SHA::7}
          release_name=Karbo-cli-ubuntu24.04-"$krb_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -D ARCH=default -D CMAKE_BUILD_TYPE=Release -D CMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -D BOOST_IGNORE_SYSTEM_PATHS_DEFAULT=ON -D BOOST_ROOT=/usr ../..
          make
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "release_name=${release_name}" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
