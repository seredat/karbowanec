name: Build check

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*'            # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-2019
    env:
      BOOST_ROOT: C:\thirdparties\boost-1.72.0
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install OpenSSL
        run: choco install openssl

      - name: Install Boost
        shell: powershell
        run: |
          $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.72.0/boost_1_72_0-msvc-14.2-64.exe"
          (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\boost-installer.exe")
          Start-Process -Wait -FilePath "$env:TEMP\boost-installer.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=$env:BOOST_ROOT"

      - name: Build
        shell: powershell
        id: build
        run: |
          $build_folder = "build"
          $sha = "${{ github.sha }}"
          $krb_ver = $sha.SubString(0,7)
          $release_name = "karbo-cli-win64-$krb_ver"
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -G "Visual Studio 16 2019" -A x64 -DBOOST_ROOT="$env:BOOST_ROOT" -DBOOST_INCLUDE_DIRS="$env:BOOST_ROOT/include" ..
          msbuild Karbowanec.sln /p:Configuration=Release /m
          cd src\Release
          Compress-Archive -Path *.exe -DestinationPath "$release_name.zip"
          $sha256 = (Get-FileHash "$release_name.zip").Hash
          $asset_path = "./$build_folder/src/Release/$release_name.zip"
          mkdir "$release_name"
          cp *.exe "$release_name/"
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=krb_ver::${krb_ver}"
          echo "::set-output name=artifact_path::$build_folder/src/Release/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-mingw:
    name: MinGW
    runs-on: windows-2019
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-boost
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-openssl

      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Prepare version
        shell: powershell
        id: setup
        run: |
          $krb_ver="${{ github.sha }}".SubString(0,7)
          $release_name="karbo-cli-win64-mingw-$krb_ver"
          echo "::set-output name=release_name::${release_name}"
      - name: Build
        shell: msys2 {0}
        id: build
        run: |
          ls
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DSTATIC=ON
          cmake --build . --config Release
      - name: Prepare release
        shell: msys2 {0}
        run: |
          mkdir build/karbo
          mv build/src/karbowanecd.exe build/karbo
          mv build/src/simplewallet.exe build/karbo
          mv build/src/greenwallet.exe build/karbo
          mv build/src/optimizer.exe build/karbo
          mv build/src/walletd.exe build/karbo
          mv build/src/vanitygen.exe build/karbo
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.setup.outputs.release_name }}
          path: build/karbo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: macOS
    runs-on: macos-11
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Build
        id: build
        run: |
          build_folder="build/"
          krb_ver=${GITHUB_SHA::7}
          release_name="Karbo-cli-macOS-$krb_ver"
          brew install --force openssl boost gcc
          brew link openssl boost --force
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -DCMAKE_C_FLAGS="-mmacosx-version-min=10.12" -DCMAKE_CXX_FLAGS="-mmacosx-version-min=10.12" -DOPENSSL_USE_STATIC_LIBS=ON ..
          make
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && strip "$f" && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          zip -r "$release_name".zip "$release_name"
          sha256=$(shasum -a 256 "$release_name".zip | awk '{print toupper($1)}')
          asset_path="./$build_folder$release_name.zip"
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=krb_ver::${krb_ver}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu20:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Build
        id: build
        run: |
          sudo apt-get update && sudo apt-get install -y libboost-all-dev
          build_folder="build/release"
          krb_ver=${GITHUB_SHA::7}
          release_name=Karbo-cli-ubuntu20.04-"$krb_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -D ARCH=default -D CMAKE_BUILD_TYPE=Release -D CMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -D BOOST_IGNORE_SYSTEM_PATHS_DEFAULT=ON -D BOOST_ROOT=/usr ../..
          make
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "::set-output name=release_name::${release_name}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu18:
    name: Ubuntu 18.04
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Build
        id: build
        run: |
          sudo apt-get purge '*boost*'
          sudo apt install -y libboost1.62-all-dev
          build_folder="build/release"
          krb_ver=${GITHUB_SHA::7}
          release_name=Karbo-cli-ubuntu18.04-"$krb_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -D ARCH=default -D CMAKE_BUILD_TYPE=Release -D CMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -D BOOST_IGNORE_SYSTEM_PATHS_DEFAULT=ON -D BOOST_ROOT=/usr ../..
          make
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "::set-output name=release_name::${release_name}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
